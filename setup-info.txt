
Simple html/css, python, flask and jinja2 examples run on local machine

####################
General Flask information:
Micro framework, doesn't do much, allows us to receive user data and send
data back as per user requests. Because it doesn't do that much for us, we
can write our applications in pure python, it doesn't tell us how we should
be writing our code.

# Installing flask on windows / powershell terminal (within vscode)
(01) Install python 3

(02) Create a virtual environment (pyenv) Pyenv for windows: https://github.com/pyenv-win/pyenv-win

    # Powershell install:
    Invoke-WebRequest -UseBasicParsing -Uri "https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1" -OutFile "./install-pyenv-win.ps1"; &"./install-pyenv-win.ps1"
    # restart Powershell
    pyenv --version
    
    # How to use pyenv (same commands apply to pyenv for windows)
    # https://blog.teclado.com/how-to-use-pyenv-manage-python-versions/
    
    # Teclado microblog code uses python 3.9.0
    pyenv install --list
    pyenv versions
    pyenv install 3.9.0
    pyenv versions
    pyenv local 3.9.0
    pyenv local
    # create a virtual environment (intellisence can now work)
    pyenv exec python -m venv .venv (add .venv to gitignore)
    # activate the virtual environment

(03) Activate pyenv
    .\.venv\Scripts\activate

(04) Install Flask (into the virtual environment)
    pip install Flask

(05) Install dotenv for environment variable management 
    pip install python-dotenv

(06) Set flask environment variables (powershell)
    # Tell Flask before we run it which python file contains the Flask app
    $env:FLASK_APP="app.py"
    $env:FLASK_APP
    $env:FLASK_DEBUG=1
    $env:FLASK_DEBUG

    FLASK_RUN_HOST="127.0.0.1"
    FLASK_RUN_HOST
    FLASK_RUN_PORT=5500 # live server defaults to this
    FLASK_RUN_PORT

Environment variables are deleted by setting them to null:
$env:TEST_VAR = 1 (create and set to 1)
$env:TEST_VAR = $null (delete)

(07) Write Flask app in file app.py (default for Flask)

    from flask import Flask
    from dotenv import load_dotenv
    load_dotenv()
    app = Flask(__name__)
    @app.route("/")
    def hello_world():
        return "Hello, world!"

(08) Now we can run flask
    flask run

(09) MongoDB / Cloud Atlas / pymongo
    pip install pymongo[srv] # in pyenv 3.9.0  
    See Mongo Cloud Atlas setup notes below
    My username is js77 for MongoDB Atlas
    VPN: need to add vpn address to Network Access in Cloud
    Atlas or will get pymongo connection timeout errors

(10) Deploy to render.com
    1. pip freeze (to see dependencies our app needs)
    2. add all these to "requirements.txt" (copy / paste)
       Can add only the following rather than everything from "pip freeze",
       these'll install the dependencies shown in "pip freeze" too (but the
       latest versions, not specific versions as in the "pip freeze" list)
            Flask
            pymongo[srv]
            python-dotenv
            gunicorn
    3. also need to add gunicorn to "requirements.txt"
    4. put code on Github, can be public or private repo, doesn't matter
    5. Connect to Github account
    6. open New -> Web Service on render.com
    7. Choose Github code then deploy the webservice:
        - Give web service a name
        - Choose region closest to me
        - Select the Github branch to use
        - Root Directory: empty
        - Runtime: Python 3
        - Build command: pip install -r requirements.txt
        - Start command: gunicorn "app:create_app()" ...(I was using "flask run" before)
        - Select free webservices plan
        - Advanced: Add environment variables
            MONGODB_URI with username and passwd (what's in our local (gitignored) .env file)
            PYTHON_VERSION 3.11.3 (latest version of python)
        - MongoDB Atlas (js77) add Netwrok Access for render.com
            Click Connect -> Outbound tab, copy the 3 URLs to the allow network access on MongoDB
            Atlas, copy one at a time.
            TEST PROJECT: allow access from everywhere on Atlas
            TEST PROJECT: have the password for MongoDB in the code (app.py), not a .env URI
                ("Preparing our app for deployment"), this means anyone can 
        - Now click Create Web Service button at the bottom of the page and wait for it to live.


    pip install -r requirements.txt (install the requirements,
        run this when depolying our app on render.com)

####################
Content that is static doesn't have to be generated, modified or processed.
The server just delivers the file to the user and the user uses it, it doesn't
have to go through any processing by the user.

In flask, HTML files go into a folder called "templates/" and this folder should
be in the same directory as the "app.py" file. The directory should be the the
top dir of the project - this is what Flask expects and looks for. For example,
"first_page.html" and  "second_page.html" can go in "templates/".

Also need to import "render_template" in app.py as this allows naming a file to
be sent to the user.

In "app.py", the function names are largely irrelevant. What the user interacts with
are the endpoints (@app.route("/"), etc). Function names only useful for out
application itself, the user doesn't care about them.

####################
Jinja2, library that comes installed with Flask.
Allows us to interpolate, to put stuff (other strings) into a text - these
other strings are HTML strings.
A template is any string of text that contains placeholders for the template
language to be able to replace these placeholders with something else.
The syntax used for the placeholders, and the whole syntax of the template
as a whole, is known as a template language, and the underlying code that
evaluates the template and puts the new values in is called a template
engine.
Flask comes with the powerful Jinja2 template language.
Flask and Jinja2 were written by the same person.

####################
Jinja2
Interpolate: "to insert between other elements or parts" 
{{ }}   expressions, these will get reduced to a single value and
        get interpolated into the template
{% %}   statements, allow Jinja2 tp make decisions or do something
        other than interpolating values (if, for)

####################
Final Forward Slashe in @app.route endpoints.
Endpoint of: @app.route("/home/") is better to use than:
@app.route("/home") because typing URL of
https://www.example.com/home or https://www.example.com/home/
will take you to the expected page. 

Endpoint of: @app.route("/home") would result in only
https://www.example.com/home working with 
https://www.example.com/home/ failing.

Teclado website 18k hits per month, most ever simultaneous POSTS is 5


####################
MongoDB Cloud Atlas
My username is js77 for MongoDB Cloud Atlas
MongoDB originally designed for large amounts of small pieces data
**MongoDB Cloud Atlas (DB in the cloud, DBaaS, DB as a Service)
**MongoDB Compass (local GUI for managing our DBs in the cloud)
MongoDB Collections of Documents (CD)

No schema needed in mDB so easy to store a lot of info without
lots of design considerations (unlike schema based SQL) but
this also means you cannot do joins to see relationships between
tables / do multiple checks like SQL cam
SQL creates relations between tables via PKs and FKs

{JSON} = 1 document
[{JSON1}, {JSON2}] = multiple documents (list of documents)

A mDB document is "like" a row in a SQL table. A collection
of documents is "like" a SQL table

** pip install pymongo[srv] # in pyenv 3.9.0  
# srv part need to connect to cloud atlas

pip freeze # see everything you've installed with pip
mongodb+srv://mong-rabbit:<password>@jack-rabbit.u44ibnh.mongodb.net/
Replace all of <password> with the password (remove < > too)

"jack-rabbit" is a mongoDB atlas CLUSTER
via USER "mong-rabbit" & PASSWD ****.
An atlas cluster can be though of as a cloud server
User "mong-rabbit" was created on the cloud atlas website

Atlas Website access for all to use my MongoDB cluster. 
1. No IP restrictions
2. Password for mong-rabbit user in the python code (can change later)
To allow access from anywhere:
All Clusters -> jack-rabbit -> Network access -> +Add IP Address -> Allow Access from Anywhere
To Change password!
All Clusters -> jack-rabbit -> Database access -> mong-rabbit (user)-> Edit


####################
Environment (in pyenv)
pip install python-dotenv
